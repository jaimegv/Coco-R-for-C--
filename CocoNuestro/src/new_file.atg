// Set the name of your grammar here (and at the end of this grammar):
COMPILER Empty

// Add auxiliary methods and declaration here.


// If you want your generated compiler case insensitive add the
// keyword IGNORECASE here.


CHARACTERS
  tab           = '\u0009'. /*  9 = tabulator */
  lf            = '\u000a'. /* 10 = line feed */
  cr            = '\u000d'. /* 13 = carriage return */
  zero          = '0'.
  nonZeroDigit  = "123456789".
  digit         = '0' + nonZeroDigit .
  letter        = 'A' .. 'Z' + 'a' .. 'z' + '_' + '$'.
  letter2		= 'A' .. 'Z' + 'a' .. 'z' + '_'.

  c1 			= ANY - "\"".
  c3 			= 'A' .. 'Z' + 'a' .. 'z' + '_' + digit.
  c4			= ANY - cr.
  c5			= ANY - "*".
  c6 			= ANY - "/".

TOKENS
  ident = letter { letter2 | digit }.

  enteros = ( zero | nonZeroDigit { digit }).
  
  cadenaCar = "\"" { c1 } "\"".


  boolean = "boolean".
  char    = "char".
  class   = "class".
  false   = "false".
  int     = "int".
  new     = "new".
  short   = "short".
  static  = "static".
  true    = "true".
  void    = "void".
  

  dosPuntos   = ":".
  comma   = ",".
  punto     = ".".
  llaveIzda  = "{".
  corcheteIzda  = "[".
  parentesisIzda    = "(".
  menos   = "-".
  not     = "!".
  mas    = "+".
  llaveDer  = "}".
  corcheteDer  = "]".
  parentesisDer    = ")".
  multiplicacion	= "*".
  div				= "/".
  menor				= "<".
  mayor				= ">".
  igual				= "=".
  puntoComa			= ";".
  doblesComillas	= '"'.
  interrogacion		= "?".
  
COMMENTS FROM "/*" TO "*/"
COMMENTS FROM "//" TO lf

IGNORE lf + cr + tab



//PRAGMAS
// Add pragma declarations here.
// Example:
//   switch = '$' { digit | letter }. (. Optional semantic action .)


// Add comments here.
// Example for a multi-line block comment:
//   COMMENTS FROM "/*" TO "*/" NESTED
// Example for a single line comment:
//   COMMENTS FROM "//" TO lf


// Set the ignored characters (whitespaces) here, the blank character is
// ignored by default.
// Example, add line breaks to the ignore set.
//   IGNORE cr + lf


PRODUCTIONS

// Add your productions here, one must have the same name as the grammar,
// it will be the start symbol (entry point of your compiler).
// Example:
//   Empty = "BEGIN" { Statement } "END".
//   Statement = ident "=" number { "+" number } .

Empty=
.

// End of your compiler specification, make sure the name here matches
// the grammar name at the start of this grammar.
END Empty.

