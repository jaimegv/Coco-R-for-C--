Memoria Compiladores Luis:
1.1. Lenguaje a reconocer.
El analizador léxico debe reconocer un conjunto del lenguaje C++, de este subconjunto habrá que hacer especial incapie en una parte del mismo, ya que, no todo lo especificado en el guión de la práctica es requesito obligatorio.

De esta manera el lenguaje que el analizador léxico reconoce es:
- Los elementos que componen una estructura de un programa típico en C++, como es por ejemplo la función main.
- Comentarios, tanto // como /* ... */
- Constantes enteras,  cadenas de caracteres y lógicas.
- Operadores:
	Artiméticos: + | - | * | / | %
	Relacionales: == | != | < | > | <= | >=
	Lógicos: && | || | !
	[Auto][In|de]crementales: ++ | --
- Operador de asignación y asignación con operación: [op]=
- Operado de clase.
- Operador condicional.
- Identificadores.

Además y como parte específica de nuestro compilador, tendremos:
- Tipo de datos:
	Vectores.
- Sentencia:
	Condicional simple y compuesta.
	Asignación.
- Instrucciones de Entrada/Salida:
	cin, cout.


Por otra parte tenemos las palabras reservadas del mismo lenguaje C++:
-> Copiar de analizador.g <-


1.2. Implementación del analizadori léxico.
el analizador léxico es el primer módulo que nos encontramos en el diseño del compilador, tiene la característica de que
ningún otro módulo volverá a acceder dde forma alguna al código fuente, por lo que toda la información que nos pueda
resultar necesaria en los módulos siguiente deberá ser recogida por dicho módulo.

	Para ser más exactos, el analizador léxico leerá caracter a caracter y gracias a la gramática generada por nuestra herramienta podrá llegar a alguno estado final. En este caso, se devolverá un Token con toda la información que pueda obtener del mismo; este módulo es el encargado de filtrar ciertos elementos que no son necesarios para la compilación, como por ejemplo los comentarios, tabulaciones, espacios en blanco, nulos... De igual manera y cómo hemos dicho anteriormente habrá que recabar la información necesaria para en caso de error en el código fuente poder informar al cliente del lugar de dicho problema.

	Por último, añadiremos que el analizador léxico ha sido diseñado utilizando una herramienta para Java conocida como ANTlr.



2.Tabla de símbolos:
2.1  Diseño:
La tabla de símbolos es creada por el primero de los componenetes del proceso de compilación, el analizador léxico. En esta tabla se irán creando espacios y actualizando la información de los mismos según se vayan pasando por los diferentes módulos del proceso de compilación.

Más en concreto la tabla de símbolos servirá para almacenar la información dada en el fichero fuente, ya sea de manera global o local (en diferentes tablas) puesto que podemos encontrarnos con varios nombres de variables locales que sean iguales y no debería provocar fallo alguno. 
Gracias a la herramienta usada para el desarrollo de la práctica (ANTlr, escrita en Java) el método de almacenamiento ha sido en una tabla hash, lo que nos procurará una mayor velocidad de acceso y agilidad es su uso. 
La tabla de símbolos principal contendrá los nombres y la información de las variables globales; de los subprogramas almacenaremos los argumentos que recibe y su tipo, junto con una dirección de otra tabla de símbolos creada para dicho subprograma que alamacenará la información específica de dicho subprograma.

Con la información almacenada en la tabla de símbolos el compilador podrá generar el código final, ya que, conoce toda la información necesaria para ello.




